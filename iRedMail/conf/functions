#!/bin/bash

# Author: Zhang Huangbin (michaelbibby <at> gmail.com)

ECHO_INFO()
{
    if [ X"$1" == X"-n" ]; then
        shift 1
        if [ X"${TERM}" == X"xterm" -o X"${TERM}" == X"linux" -o X"${TERM}" == X"pcconsole" ]; then
            echo -ne "\033[42m${INFO_FLAG}\033[0m $@"
        else
            echo -ne "${INFO_FLAG} $@"
        fi
    else
        if [ X"${TERM}" == X"xterm" -o X"${TERM}" == X"linux" -o X"${TERM}" == X"pcconsole" ]; then
            echo -e "\033[42m${INFO_FLAG}\033[0m $@"
        else
            echo -e "${INFO_FLAG} $@"
        fi
    fi
}

ECHO_QUESTION()
{
    if [ X"$1" == X"-n" ]; then
        shift 1
        if [ X"${TERM}" == X"xterm" -o X"${TERM}" == X"linux" -o X"${TERM}" == X"pcconsole" ]; then
            echo -ne "\033[45m${QUESTION_FLAG}\033[0m $@"
        else
            echo -ne "${QUESTION_FLAG} $@"
        fi
    else
        if [ X"${TERM}" == X"xterm" -o X"${TERM}" == X"linux" -o X"${TERM}" == X"pcconsole" ]; then
            echo -e "\033[45m${QUESTION_FLAG}\033[0m $@"
        else
            echo -e "\n${QUESTION_FLAG} $@"
        fi
    fi
}

ECHO_ERROR()
{
    if [ X"$1" == X"-n" ]; then
        shift 1
        if [ X"${TERM}" == X"xterm" -o X"${TERM}" == X"linux" -o X"${TERM}" == X"pcconsole" ]; then
            echo -ne "\033[41m${ERROR_FLAG}\033[0m $@"
        else
            echo -ne "${ERROR_FLAG} $@"
        fi
    else
        if [ X"${TERM}" == X"xterm" -o X"${TERM}" == X"linux" -o X"${TERM}" == X"pcconsole" ]; then
            echo -e "\033[41m${ERROR_FLAG}\033[0m $@"
        else
            echo -e "${ERROR_FLAG} $@"
        fi
    fi
}

backup_file()
{
    # Usage: backup_file file1 [file2 file3 ... fileN]
    if [ X"$#" != X"0" ]; then
        for conf_file in $@; do
            if [ -f ${conf_file} ]; then
                if [ X"${TERM}" == X"xterm" -o X"${TERM}" == X"linux" -o X"${TERM}" == X"pcconsole" ]; then
                    echo -e "\033[43m${BACKUP_FLAG}\033[0m Backup file: ${conf_file} -> ${conf_file}.${DATE}."
                else
                    echo -e "${BACKUP_FLAG} ${conf_file} -> ${conf_file}.${DATE}."
                fi

                cp -f ${conf_file} ${conf_file}.${DATE}
            else
                :
            fi
        done
    else
        :
    fi
}

check_user()
{
    # Check special user privilege to execute this script.
    if [ X"$(id -u)" != X"$(id -u ${1})" ]; then
        ECHO_INFO "Please run this script as user: ${1}."
        exit 255
    else
        if [ X"$(id -u)" == X"0" ]; then
            export PATH="/usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin"
        else
            :
        fi
    fi
}

check_hostname()
{
    echo ${HOSTNAME} | grep '\.' >/dev/null 2>&1
    [ X"$?" != X"0" ] && \
        ECHO_ERROR "Please configure a fully qualified domain name (FQDN) in /etc/hosts before we go further.\n\nExample:\n\n127.0.0.1   mail.iredmail.org mail localhost\n" && \
        exit 255
}

check_pkg()
{
    # Usage: check_pkg <command> <package>
    # It means: <package> owns <command>
    cmd="$1"
    pkg="$2"

    ECHO_INFO "Checking necessary command/package: ${cmd}/${pkg} ..."
    for i in $(echo $PATH|sed 's/:/ /g'); do
        [ -x $i/${cmd} ] && export HAS_CMD='YES'
    done

    if [ X"${HAS_CMD}" != X'YES' ]; then
        eval ${install_pkg} ${pkg}
        if [ X"$?" != X"0" ]; then
            ECHO_INFO "Please install package ${pkg} first." && exit 255
        else
            :
        fi
    else
        :
    fi

    unset HAS_CMD
}

# Check necessery privileges/files/dirs.
check_env()
{
    # Check user privilege.
    check_user root

    # Check FQDN hostname.
    check_hostname

    # Check config tool: dialog.
    check_pkg ${BIN_DIALOG} ${PKG_DIALOG}

    ECHO_INFO -n "Check configuration file: ${CONFIG_FILE}..."
    if [ -f ${CONFIG_FILE} ]; then
        grep '^#EOF$' ${CONFIG_FILE} >/dev/null

        if [ X"$?" == X"0" ]; then
            echo -e "\tFound."
            ECHO_QUESTION -n "Use it for mail server setting? [y|N]"
            read ANSWER

            case  $ANSWER in
                Y|y )
                    ECHO_INFO "Use configuration file: ${CONFIG_FILE} for mail server setting."
                    . ${CONFIG_FILE}

                    # Check installation status.
                    # After each component installation was completed, there
                    # should be a variable in ${STATUS_FILE}, e.g.
                    #
                    #   export STATUS_PHP_INSTALLATION='DONE'
                    #   export STATUS_PHP_CONFIGURATION='DONE'
                    #
                    if [ -e ${STATUS_FILE} ]; then
                        . ${STATUS_FILE}
                    else
                        echo '' > ${STATUS_FILE}
                    fi

                    # Initialize tip file.
                    if [ ! -e ${TIP_FILE} ]; then
                        cat > ${TIP_FILE} <<EOF
${CONF_MSG}
If you consider here should be put some more infomation, please contact us:
    - http://code.google.com/p/iredmail/

EOF
                    else
                        :
                    fi
                    ;;
                N|n|* )
                    echo "Skip configuration file: ${CONFIG_FILE}."
                    . ${CONFIG_VIA_DIALOG}
                    ;;
            esac
        else
            echo -e "\tFound, but not finished."
            . ${CONFIG_VIA_DIALOG}
        fi
    else
        echo -e "\tNone."
        . ${CONFIG_VIA_DIALOG}
    fi
}

extract_pkg()
{
    if [ X"$2" = X"" ]; then
        DST='.'
    else
        DST="$2"
    fi

    if echo $1 | grep '.tar.gz$' >/dev/null 2>&1 ; then
        ECHO_INFO "Extract package $1 to ${DST}"
        tar zxf $1 -C $DST
    elif echo $1 | grep '.tar.bz2$' >/dev/null 2>&1 ; then
        # Install bzip2 first.
        check_pkg ${BIN_BZIP2} ${PKG_BZIP2}

        ECHO_INFO "Extract package $1 to ${DST}"
        tar xjf $1 -C $DST
    else
        ECHO_INFO "Unknown archive format."
    fi
}

check_status_before_run()
{
    #
    # Every function will append status info to ${STATUS_FILE}.
    # Format is:
    #   function_name() {:}
    # Status info:
    #   export status_function_name='DONE'
    #
    _status="status_$1"
    if [ X"$(eval echo \$${_status})" != X"DONE" ]; then
        $1
    else
        if [ X"${TERM}" == X"xterm" -o X"${TERM}" == X"linux" -o X"${TERM}" == X"pcconsole" ]; then
            echo -e "\033[46m<<< SKIP >>>\033[0m Skip function: $1."
        else
            echo -e "<<< SKIP >>> Skip function: $1."
        fi
    fi
}

# -----------------------------------------------------------------
# - OS/OS_Version/Arch dependent.
# -----------------------------------------------------------------
enable_service_rh()
{
    services="$@"
    for i in $services; do
        /sbin/chkconfig --level 345 $i on
    done
}

disable_service_rh()
{
    services="$@"
    for i in $services; do
        /sbin/chkconfig --level 345 $i off
    done
}

enable_service_debian()
{
    services="$@"
    for i in $services; do
        update-rc.d $i defaults
    done
}

disable_service_debian()
{
    services="$@"
    for i in $services; do
        update-rc.d -f $i remove
    done
}

service_control()
{
    service="$1"
    action="$2"
    /etc/init.d/${service} ${action}
}

gen_ldap_passwd()
{
    slappasswd -h {SSHA} -s "${1}"
}

install_pkg_rhel()
{
    ECHO_INFO "Installing package(s): $@"
    yum -d 2 -y install $@
    if [ X"$?" != X"0" ]; then
        ECHO_ERROR "Installation failed, please check the terminal output."
        exit 255
    else
        :
    fi
}

install_pkg_debian()
{
    ECHO_INFO "Installing package(s): $@"
    apt-get install -y --force-yes $@
    if [ X"$?" != X"0" ]; then
        ECHO_ERROR "Installation failed, please check the terminal output."
        exit 255
    else
        :
    fi
}

remove_pkg_rhel()
{
    ECHO_INFO "Removing package(s): $@"
    yum remove -y $@
    [ X"$?" != X"0" ] && ECHO_ERROR "Package removed failed, please check the terminal output."
}

remove_pkg_debian()
{
    ECHO_INFO "Removing package(s): $@"
    apt-get purge -y $@
    [ X"$?" != X"0" ] && ECHO_ERROR "Package removed failed, please check the terminal output."
}

